---
import Layout from '../../../../layouts/Layout.astro';
import { set_cookies, validateUser } from '../../../../util/authUtils';
import { getTokens, getUser } from '../../../../util/discordUtils';
import type { User } from '../../../../util/srlmTypes';
import { srlm_basic_auth, srlmGet, srlmPost } from '../../../../util/srlmUtils';

const code = Astro.url.searchParams.get('code');

if (!code) {
    return Astro.redirect('/login?error=discordauth');
}
const data = await getTokens(code);

const discord_login = {
    access_token: data.access_token,
    refresh_token: data.refresh_token,
    expires_in: data.expires_in
}

var userToken = Astro.cookies.get('user_token')?.value;

if (userToken) {
    
    const userValidate = await validateUser(userToken);

    console.log(userValidate)

    if (userValidate) {
        const user: User = await srlmGet(`/users/${userValidate.user}`, userToken);

        const discord_user = await getUser(data.access_token);

        const discord_link = {
            discord_id: discord_user.id,
            access_token: data.access_token,
            refresh_token: data.refresh_token,
            expires_in: data.expires_in
        }

        await srlmPost(`/users/${user.id}/discord`, userToken, discord_link);
        return Astro.redirect('/profile')
    }
}

userToken = await srlmPost('/auth/discord', '', discord_login);

set_cookies(Astro, userToken);

const userResponse = await getUser(data.access_token);

if (!userResponse) {
    return Astro.redirect('/login?error=discordauth');
}

return Astro.redirect('/profile');

return Astro.redirect('/login?error=sessionexpire');

---

<Layout title='Validating credentials...'>
    <p class="text-white"></p>
</Layout>