---
import TeamManageLayout from "../../../layouts/TeamManageLayout.astro";
import { isTeamManager, isTeamOwner, permsHasOneOf, validateUser } from "../../../util/authUtils";
import type { TeamManage, User } from "../../../util/srlmTypes";
import { SRLMAPIError, srlmGet, srlmPost } from "../../../util/srlmUtils";
import Page400 from '../../400.astro';
import Page401 from '../../401.astro';
import Page403 from '../../403.astro';
import Page404 from '../../404.astro';
import Page500 from '../../500.astro';
import Page503 from '../../503.astro';

var status = '200';

var userToken = Astro.cookies.get('user_token')?.value || '';
const perms = ['admin', 'team_owner', 'team_manager', 'leag_coord', 'leag_comm'];
const userValidate = await validateUser(userToken, perms).catch(err => {
    if (err instanceof SRLMAPIError) {
        status = err.code;
    }
	console.error(err);
});

const userIsElevated = permsHasOneOf(userValidate, ['admin', 'leag_coord', 'leag_comm']);
var userIsOwner = false;
var userIsManager = false;

var user: User|null = null;
if (userValidate) {
    user = await srlmGet(`/users/${userValidate?.user}`, userToken).catch(err => {
        if (err instanceof SRLMAPIError) {
            status = err.code;
        }
        console.error(err);
    });
}

var team: TeamManage|null = null;
var userIsPlayer = false;
var userHasTeam = false;

if (user?.player?.current_team) {
    team = await srlmGet(`/teams/${user.player.current_team.id}/manage`).catch(err => {
        if (err instanceof SRLMAPIError) {
            status = err.code;
        }
        console.error(err);
    });
    userIsPlayer = (user.player.current_team.id === team!.id);
    userHasTeam = true;
    userIsManager = isTeamManager(userValidate, [team!.id]);
    userIsOwner = isTeamOwner(userValidate, team!.id);
}

var errors:{[key:string]:string} = {};

var teamName: string = '';
var teamAcronym: string = '';
var teamColor: string = '#1F2937';

if (Astro.request.method === "POST") {
    const formData = await Astro.request.formData();

    teamName = formData.get('name')!.toString();
    teamAcronym = formData.get('acronym')!.toString();
    teamColor = formData.get('color')!.toString();
    

    const teamInput = {
        name: teamName,
        acronym: teamAcronym,
        color: teamColor.replace('#', ''),
        founded_date: new Date()
    }

    const resp = await srlmPost(`/teams`, userToken, teamInput).catch(err => {
        if (err instanceof SRLMAPIError) {
            if (err.code === '409') {
                err.data.fields.map((err:{field:string, error: string}) => {
                    errors[err.field] = err.error;                
                })
            } else {
                status = err.code;
            }
        }
        console.error(err);
    });
    if (resp) {
        return Astro.redirect(`/manage/teams/`);
    }
}

---
{status === '400' &&
    <Page400/>
}
{status === '401' &&
	<Page401/>
}
{status === '403' &&
	<Page403/>
}
{status === '404' &&
	<Page404/>
}
{status === '500' &&
	<Page500/>
}
{status === '503' &&
	<Page503/>
}
{status === '200' &&
    <TeamManageLayout 
        title={`Create Team`}
        team={team}
        page="create"
        userElevated={userIsElevated}
        userOwner={userIsOwner}
        userManager={userIsManager}
        userPlayer={userIsPlayer}
        userHasTeam={userHasTeam}>
        {user!.player &&
            <div>
                {!userHasTeam &&
                    <form method="post" class="w-fit mx-auto">
                        <table>
                            <tr>
                                <td class="p-2">Name:</td>
                                <td class="p-2">
                                    
                                    <input type="text" name="name" id="name" value={teamName} maxlength="64" class="text-black indent-2 rounded-sm outline outline-2 outline-gray-400" required/>
                                    {(errors && errors['name']) && (
                                        <br/>
                                        <span class="text-red-600 font-bold">
                                            {errors['name']}
                                        </span>  
                                    )}
                                </td>
                            </tr>
                            <tr>
                                <td class="p-2">Acronym:</td>
                                <td class="p-2">
                                    <input type="text" name="acronym" id="acronym" maxlength="5" value={teamAcronym} class="text-black indent-2 rounded-sm outline outline-2 outline-gray-400" required/>
                                    {(errors && errors['acronym']) && (
                                        <br/>
                                        <span class="text-red-600 font-bold">
                                            {errors['acronym']}
                                        </span>  
                                    )}
                                </td>
                            </tr>
                            <tr>
                                <td class="p-2">Colour:</td>
                                <td class="p-2">
                                    <input type="color" name="color" id="color" value={teamColor} required class="text-black indent-2 rounded-sm outline outline-2 outline-gray-400" />
                                </td>
                            </tr>
                            {userIsElevated &&
                                <tr>

                                </tr>
                                <tr id="set-owner">

                                </tr>
                            }
                            <tr>
                                <td colspan="2" class="py-4">
                                    <button id="update" class="bg-gray-400 text-black font-bold px-2 rounded-md outline outline-2 outline-gray-900 hover:bg-gray-300 mx-2">
                                        Create
                                    </button>
                                </td>
                            </tr>
                        </table>
                    </form>
                    ||
                    'Leave your current team to create a new one'
                }
            </div>
            ||
            <p>You do not have a linked Slapshot profile.
            <br>Please link your steam account.</p>
        }
    </TeamManageLayout>
}