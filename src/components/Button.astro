---
import Popup from './Popup.astro';


interface Props {
    label: string,
    className?: string,
    id?: string,
    form?: {
        action: string,
        value: number,
        confirm?: string,
        formAction: string,
    },
    mini?:boolean,
    type?:"button" | "reset" | "submit" | null | undefined
    name?:string,
    value?:string
};

const { label, className='', id='', form, mini, type='submit', name='', value='' } = Astro.props;

---
{form &&
    <>
        {form.confirm &&
            <Popup name={form.action} id={form.value.toString()} label={label} className={className} mini={mini}>
                <p>
                    {
                        form.confirm.split('\n').map(line =>(
                            <>{line}<br/></>
                        ))
                    }
                </p>
                <form method="post" class="inline">
                    <input type="text" name="action" value={form.action} hidden />
                    <input type="text" name="value" value={form.value} hidden/>
                    <button name='submit' value={form.action} id={`${form.action}-${form.value}`} formaction={form.formAction} class={`mt-4 bg-opacity-80 hover:shadow-md hover:bg-opacity-60 duration-200 transition-all font-bold py-2 px-4 rounded-md shadow-black ${className}`}>
                        {label}
                    </button>
                </form>
            </Popup>

            ||

            <form method="post">
                <input type="text" name="action" value={form.action} hidden />
                <input type="text" name="value" value={form.value} hidden/>
                {mini &&
                    <button name={name} value={value} id={`${form.action}-${form.value}`} formaction={form.formAction} type={type} class={`font-bold px-2 rounded-md outline outline-2 ${className}`}>
                        {label}
                    </button>

                    ||

                    <button name={name} value={value} id={`${form.action}-${form.value}`} formaction={form.formAction} type={type} class={`mt-4 bg-opacity-80 hover:shadow-md hover:bg-opacity-60 duration-200 transition-all font-bold py-2 px-4 rounded-md shadow-black ${className}`}>
                        {label}
                    </button>
                }
            </form>
            
        }
    </>
    
    ||

    <>
        {mini &&
            <button name={name} value={value} id={id} type={type} class={`font-bold px-2 rounded-md outline outline-2 ${className}`}>
                {label}
            </button>
            ||
            <button name={name} value={value} id={id} type={type} class={`mt-4 bg-opacity-80 hover:shadow-md hover:bg-opacity-60 duration-200 transition-all font-bold py-2 px-4 rounded-md shadow-black ${className}`}>
                {label}
            </button>
        }
    </>
}