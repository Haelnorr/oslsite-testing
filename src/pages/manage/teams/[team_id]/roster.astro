---
import TeamManageLayout from "../../../../layouts/TeamManageLayout.astro";
import { isTeamManager, isTeamOwner, permsHasOneOf, validateUser } from "../../../../util/authUtils";
import type { TeamManage, User } from "../../../../util/srlmTypes";
import { srlmGet, leaveTeam, srlmPost, joinTeam, SRLMAPIError } from "../../../../util/srlmUtils";
import Page401 from '../../../401.astro';
import Page403 from '../../../403.astro';
import Page404 from '../../../404.astro';
import Page500 from '../../../500.astro';
import Page503 from '../../../503.astro';

var status = '200';

var { team_id } = Astro.params;

var userToken = Astro.cookies.get('user_token')?.value;
if (!userToken) {
    return Astro.redirect('/login')
}
const perms = ['admin', 'team_owner', 'team_manager', 'leag_coord', 'leag_comm'];
const userValidate = await validateUser(userToken, perms).catch(err => {
    if (err instanceof SRLMAPIError) {
        status = err.code;
    }
	console.error(err);
});

const userIsElevated = permsHasOneOf(userValidate, ['admin', 'leag_coord', 'leag_comm']);
const userIsManager = isTeamManager(userValidate, [+team_id!]);

const team: TeamManage = await srlmGet(`/teams/${team_id}/manage?cached=false`);
const userIsOwner = isTeamOwner(userValidate, team.id);

const user: User = await srlmGet(`/users/${userValidate?.user}`, userToken).catch(err => {
    if (err instanceof SRLMAPIError) {
        status = err.code;
    }
	console.error(err);
});

var userIsPlayer = false;
var userHasTeam = false;
if (user.player.current_team) {
    userIsPlayer = (user.player.current_team.id === team.id);
    userHasTeam = true;
}

if (!userIsPlayer && !userIsElevated) {
    return Astro.redirect(`/league/teams/${team.id}`);
}

if (Astro.request.method === "POST") {
    const form_data = await Astro.request.formData();
    const action = form_data.get('action')?.toString();
    const value = form_data.get('value')?.toString();

    var redirect: string = `/manage/teams/${team.id}/roster`;
    console.log(action)

    switch (action) {
        case 'leave-team':
            await leaveTeam(user.player.id).catch(err => {
                if (err instanceof SRLMAPIError) {
                    status = err.code;
                }
                console.error(err);
            });
            redirect = '/manage/teams';
            break;
        case 'rejoin-team':
            await joinTeam(user.player.id, team.id.toString()).catch(err => {
                if (err instanceof SRLMAPIError) {
                    status = err.code;
                }
                console.error(err);
            });
            break;
        case 'kick':
            await leaveTeam(+value!).catch(err => {
                if (err instanceof SRLMAPIError) {
                    status = err.code;
                }
                console.error(err);
            });
            break;
        case 'promote':
            await srlmPost(`/users/${value}/permissions`, '', {
                key: 'team_manager',
                modifiers: [team.id.toString()]
            }).catch(err => {
                if (err instanceof SRLMAPIError) {
                    status = err.code;
                }
                console.error(err);
            });
            break;
        case 'demote':
            await srlmPost(`/users/${value}/permissions/revoke`, '', {
                key: 'team_manager',
            }).catch(err => {
                if (err instanceof SRLMAPIError) {
                    status = err.code;
                }
                console.error(err);
            });
            break;
    }

    return Astro.redirect(redirect);
}
---
{status === '401' &&
    <Page401/>
}   
{status === '403' &&
    <Page403/>
}
{status === '404' &&
    <Page404/>
}
{status === '500' &&
    <Page500/>
}
{status === '503' &&
    <Page503/>
}
{status === '200' &&
    <TeamManageLayout 
        title={`Manage Team: ${team.name}`}
        team={team}
        page="roster"
        userElevated={userIsElevated}
        userOwner={userIsOwner}
        userManager={userIsManager}
        userPlayer={userIsPlayer}
        userHasTeam={userHasTeam}>
            <h3 class="text-3xl pb-5">Players:</h3>
            <div class="bg-gray-700 bg-opacity-30 rounded-md p-3 h-fit mb-10 w-fit mx-auto">
                <table class="divide-y-2 divide-gray-500">
                    <thead>
                        <tr>
                            <th class="px-2">Player</th>
                            <th class="px-2">Role</th>
                            <th class="px-2" colspan="2">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                    {
                        team.players.map((player, index) => (
                            <tr >
                                <td class="px-2 py-2"><a href={`/league/players/${player.id}`}>{player.name}</a></td>
                                <td class="px-2">
                                    {(player.manager && player.name !== team.owner) &&
                                        'Manager'
                                    }
                                    {(player.manager && player.name === team.owner) &&
                                        'Owner/Manager'
                                    }
                                    {(!player.manager && player.name === team.owner) &&
                                        'Owner'
                                    }
                                    {(!player.manager && player.name !== team.owner) &&
                                        'Player'
                                    }
                                    </td>
                                <td class="px-2">
                                    {(!player.manager && player.user_id && (userIsElevated || userIsManager || userIsOwner)) &&
                                        <form method="post">
                                            <input type="text" name="action" value="promote" hidden/>
                                            <input type="text" name="value" value={player.user_id.toString()} hidden/>
                                            <button formaction={`/manage/teams/${team.id}/roster`} class="promote bg-gray-400 text-black font-bold px-2 rounded-md outline outline-2 outline-gray-900 hover:bg-gray-300">
                                                Promote
                                            </button>
                                        </form>
                                    }
                                    {(player.manager && userIsOwner) &&
                                        <form method="post">
                                            <input type="text" name="action" value="demote" hidden/>
                                            <input type="text" name="value" value={player.user_id.toString()} hidden/>
                                            <button formaction={`/manage/teams/${team.id}/roster`} class="demote bg-gray-400 text-black font-bold px-2 rounded-md outline outline-2 outline-gray-900 hover:bg-gray-300">
                                                Demote
                                            </button>
                                        </form>
                                    }
                                </td>
                                <td class="px-2">
                                    {((!player.manager || userIsOwner ) && player.user_id !== user.id && (userIsElevated || userIsManager || userIsOwner)) &&
                                        <form method="post">
                                            <input type="text" name="action" value="kick" hidden/>
                                            <input type="text" name="value" value={player.id.toString()} hidden/>
                                            <button formaction={`/manage/teams/${team.id}/roster`} class="kick bg-gray-400 text-black font-bold px-2 rounded-md outline outline-2 outline-gray-900 hover:bg-gray-300">
                                                Kick
                                            </button>
                                        </form>
                                    }
                                </td>
                            </tr>
                        ))
                    }
                    </tbody>
                </table>
                <script>
                    var kick_buttons = [].slice.call(document.getElementsByClassName('kick'));
                    kick_buttons.forEach(element => {
                        //@ts-ignore
                        element.onclick = function confirmKick(e) {
                            if (!confirm('Are you sure you wish to kick this user?')) 
                                e.preventDefault();
                        }
                    });
                    var promote_buttons = [].slice.call(document.getElementsByClassName('promote'));
                    promote_buttons.forEach(element => {
                        //@ts-ignore
                        element.onclick = function confirmPromote(e) {
                            if (!confirm('Are you sure you wish to promote this user to manager?')) 
                                e.preventDefault();
                        }
                    });
                    var demote_buttons = [].slice.call(document.getElementsByClassName('demote'));
                    demote_buttons.forEach(element => {
                        //@ts-ignore
                        element.onclick = function confirmDemote(e) {
                            if (!confirm('Are you sure you wish to demote this user to player?')) 
                                e.preventDefault();
                        }
                    });
                </script>
            </div>
    </TeamManageLayout>
}