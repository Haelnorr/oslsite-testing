---
import Layout from "../../../layouts/Layout.astro";
import type { SeasonCollection } from "../../../util/srlmTypes";
import { SRLMAPIError, srlmGet } from "../../../util/srlmUtils";
import Page401 from '../../401.astro';
import Page403 from '../../403.astro';
import Page404 from '../../404.astro';
import Page500 from '../../500.astro';
import Page503 from '../../503.astro';

var status = '200';

var page: string = Astro.url.searchParams.get('page')! || '1';
var per_page: string = Astro.url.searchParams.get('per_page')! || '10';
var start_date: string = Astro.url.searchParams.get('start_date')! || '';
var end_date: string = Astro.url.searchParams.get('end_date')! || '';
var order: string = Astro.url.searchParams.get('order')! || 'desc';
var order_by: string|null = Astro.url.searchParams.get('order_by')! || '';

const dateRegex: RegExp = /^[0-9]{4}\-[0-9]{2}\-[0-9]{2}?$/;

if (isNaN(+page)) {page='1'}
if (isNaN(+per_page)) {per_page='10'}
if (!dateRegex.test(start_date)) {start_date = ''}
if (!dateRegex.test(end_date)) {end_date = ''}
if (order != 'desc' && order != 'asc') {order = 'desc'}
if (order_by != 'id' &&
    order_by != 'start_date' &&
    order_by != 'end_date' &&
    order_by != 'finals_start' &&
    order_by != 'finals_end' &&
    order_by != 'name' &&
    order_by != 'league') {order_by = null}

var query = `league=osl&page=${page}&per_page=${per_page}&order=${order}`;
if (start_date) {
    query = query + `&start_date=${start_date}`;
}
if (end_date) {
    query = query + `&end_date=${end_date}`;
}
if (order_by) {
    query = query + `&order_by=${order_by}`;
}
const seasons: SeasonCollection = await srlmGet(`/seasons?${query}`).catch(err => {
    if (err instanceof SRLMAPIError) {
        status = err.code;
    }
	console.error(err);
});


function queryToDict(query: string):{[key:string]:string} {
    var paramsList = query.replace('?', '').split('&');

    var params:{[key:string]:string} = {};

    paramsList.forEach(splitParam);

    function splitParam(param: string) {
        const keypair = param.split('=');
        params[keypair[0]] = keypair[1];
    }


    return params;
}


function updateQuery(link:string):string {
    var oldQuery = queryToDict(Astro.url.search);
    if (!Astro.url.search) {
        oldQuery = {}
    }
    
    var newQuery = queryToDict(link.replace('/api/seasons', ''));

    if (Object.keys(newQuery).includes('order_by')) {
        if (newQuery['order_by'] === oldQuery['order_by'] || newQuery['order_by'] === order_by){
            switch (order) {
                case 'asc':
                    newQuery['order'] = 'desc';
                    break;
                case 'desc':
                    newQuery['order'] = 'asc';
                    break;
            }
        } else {
            newQuery['order'] = 'asc';
        }
    }

    const updated_params = {
        ...oldQuery, 
        ...newQuery
    }

    var updatedQuery = '?';

    for (let key in updated_params) {
        if (updatedQuery != '?') {updatedQuery = updatedQuery + '&'}
        updatedQuery = updatedQuery + `${key}=${updated_params[key]}`
    }
    return Astro.url.pathname + updatedQuery;
    
}
var pageNums = Array.from({length: seasons._meta.total_pages}, (_, i) => i + 1);
---
{status === '401' &&
	<Page401/>
}
{status === '403' &&
	<Page403/>
}
{status === '404' &&
	<Page404/>
}
{status === '500' &&
	<Page500/>
}
{status === '503' &&
	<Page503/>
}
{status === '200' &&
    <Layout title="Seasons">
        <main class="text-white sm:container py-10 px-40 mx-auto">
            <div class="mx-auto w-fit max-w-full overflow-x-auto">
                <table>
                    <thead class="bg-gray-900">
                        <tr class="divide-x-2 divide-gray-400">
                            <th class="px-3">
                                <a href={updateQuery('order_by=id')} class="hover:underline">
                                    ID
                                </a>
                            </th>
                            <th class="px-3">
                                <a href={updateQuery('order_by=name')} class="hover:underline">
                                    Name
                                </a>
                            </th>
                            <th class="px-3">
                                <a href={updateQuery('order_by=acronym')} class="hover:underline">
                                    Acronym
                                </a>
                            </th>
                            <th class="px-3">
                                <a href={updateQuery('order_by=start_date')} class="hover:underline">
                                    Start Date
                                </a>
                            </th>
                            <th class="px-3">
                                <a href={updateQuery('order_by=end_date')} class="hover:underline">
                                    End Date
                                </a>
                            </th>
                            <th class="px-3">
                                <a href={updateQuery('order_by=finals_start')} class="hover:underline">
                                    Finals Start
                                </a>
                            </th>
                            <th class="px-3">
                                <a href={updateQuery('order_by=finals_end')} class="hover:underline">
                                    Finals End
                                </a>
                            </th>
                            <th class="px-3">
                                <a>
                                    Registration
                                </a>
                            </th>
                            <th class="px-3">
                                <a>
                                    Match Type
                                </a>
                            </th>
                            <th class="px-3">
                                <a>
                                    Divisions
                                </a>
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            seasons.items.map((season, index) => (
                                <tr class={`${(index%2===0 && 'bg-gray-600') || 'bg-gray-700'} divide-x-2 divide-gray-400`}>
                                    <td class="px-3">
                                        <a href={`/league/seasons/${season.acronym}`} class="hover:underline">
                                            {season.id}
                                        </a>
                                    </td>
                                    <td class="px-3">
                                        <a href={`/league/seasons/${season.acronym}`} class="hover:underline">
                                            {season.name}
                                        </a>
                                    </td>
                                    <td class="px-3">{season.acronym}</td>
                                    <td class="px-3">{season.start_date}</td>
                                    <td class="px-3">{season.end_date}</td>
                                    <td class="px-3">{season.finals_start}</td>
                                    <td class="px-3">{season.finals_end}</td>
                                    <td class="px-3">{season.can_register && 'Open' || 'Closed'}</td>
                                    <td class="px-3">{season.match_type}</td>
                                    <td class="px-3">
                                        {
                                            season.divisions.map(division => (
                                                <a href={`/league/seasons/${season.acronym}/${division.acronym}`} class="hover:underline">
                                                    {division.name}
                                                </a><br/>
                                            ))
                                        }
                                    </td>
                                </tr>
                            ))
                        }
                    </tbody>
                </table>
                <div class="mt-3 flex justify-center">
                    <div class="w-14 h-6">
                        {seasons._links.prev &&
                            <a href={updateQuery(seasons._links.prev)}
                                class="bg-gray-400 text-black font-bold px-2 rounded-md outline outline-2 outline-gray-900 hover:bg-gray-300 mx-2">
                                Prev
                            </a>
                        }
                    </div>
                    <div class="mx-3 w-fit">
                        {
                            pageNums.map(page => (
                                <span>
                                    {(page != seasons._meta.page) &&
                                        <a href={updateQuery(`page=${page}`)} class="hover:underline px-1 hover:cursor-pointer font-bold">{page}</a>
                                        ||
                                        <a class="px-1">{page}</a>
                                    }
                                </span>
                            ))
                        }
                    </div>
                    <div class="w-14 h-6">
                        {seasons._links.next &&
                            <a href={updateQuery(seasons._links.next)}
                                class="bg-gray-400 text-black font-bold px-2 rounded-md outline outline-2 outline-gray-900 hover:bg-gray-300 mx-2">
                                Next
                            </a>
                        }
                    </div>
            </div>
        </main>   
    </Layout>
}