---
import TeamManageLayout from "../../../../layouts/TeamManageLayout.astro";
import { is_team_manager, is_team_owner, perms_has_one_of, verify_user } from "../../../../util/authUtils";
import type { PlayerCollection, PlayerTeams, Team, TeamManage, User } from "../../../../util/srlmTypes";
import { srlm_delete, srlm_get, srlm_post } from "../../../../util/srlmUtils";

var { team_id } = Astro.params;

var user_token = Astro.cookies.get('user_token')?.value;
if (!user_token) {
    return Astro.redirect('/login')
}
const perms = ['admin', 'team_owner', 'team_manager', 'leag_coord', 'leag_comm'];
const user_validate = await verify_user(user_token, perms);

if (user_validate === '503') {
    return Astro.redirect('/503')
}

const user_is_elevated = perms_has_one_of(user_validate, ['admin', 'leag_coord', 'leag_comm']);
const user_is_owner = is_team_owner(user_validate, +team_id);
const user_is_manager = is_team_manager(user_validate, [+team_id]);

const team: TeamManage = await srlm_get(`/teams/${team_id}/manage`);

const user: User = await srlm_get(`/users/${user_validate.user}`, user_token);
var player_team: Team;
if (user.player) {
    const resp: PlayerTeams = await srlm_get(`/players/${user.player}/teams?current=true&cached=False`);
    if (resp) {player_team = resp.current_team};
}

var user_is_player = false;
var user_has_team = false;
if (player_team) {
    user_is_player = (player_team.id === team.id);
    user_has_team = true;
}

if (!user_is_player && !user_is_elevated) {
    return Astro.redirect(`/league/teams/${team.id}`);
}

if (Astro.request.method === "POST") {
    const form_data = await Astro.request.formData();
    const action = form_data.get('action')?.toString();
    const value = form_data.get('value')?.toString();

    switch (action) {
        case 'invite':
            await srlm_post(`/teams/${team.id}/invite`, user_token, {
                player_id: +value
            });
            break;
        case 'cancel':
            // cancel invite with id 'value'
            const resp = await srlm_delete(`/teams/invite/${value}`);
            break;
    }

    return Astro.redirect(`/manage/teams/${team.id}/invite`);
}

const search = Astro.url.searchParams.get('search')! || null;
var invitablePlayers: PlayerCollection = null

if (search) {
    const query = `/players?has_team=false&cached=false&search=${search}`
    invitablePlayers = await srlm_get(query);
}



---
<TeamManageLayout 
    title={`Manage Team: ${team.name}`}
    team={team}
    page="invite"
    user_elevated={user_is_elevated}
    user_owner={user_is_owner}
    user_manager={user_is_manager}
    user_player={user_is_player}
    user_has_team={user_has_team}>
    <div class="divide-y divide-gray-600">
        <div class="w-fit mx-auto">
            <h4 class="text-xl">Sent Invites</h4>
            <table class="mt-5">
                <thead class="bg-gray-900">
                    <tr class="divide-x-2 divide-gray-400">
                        <th class="px-2">Player</th>
                        <th class="px-2">Invited by</th>
                        <th class="px-2">Status</th>
                        <th class="px-2">Action</th>
                    </tr>
                </thead>
                <tbody>
                    {team.invites.length > 0 &&
                        team.invites.map((invite, index) => (
                            <tr class={`${(index%2===0 && 'bg-gray-600') || 'bg-gray-700'} divide-x-2 divide-gray-400`}>
                                <td class="px-2"><a href={`/league/players/${invite.invited_player.id}`}>{invite.invited_player.player_name}</a></td>
                                <td class="px-2">{invite.inviting_player.player_name}</td>
                                <td class="px-2">{invite.status}</td>
                                <td class="px-2 py-1">
                                    <form method="post">
                                        <input type="text" name="action" value="cancel" hidden/>
                                        <input type="text" name="value" value={invite.id.toString()} hidden/>
                                        <button formaction={`/manage/teams/${team.id}/invite`} class="cancel bg-gray-400 text-black font-bold px-2 rounded-md outline outline-2 outline-gray-900 hover:bg-gray-300">
                                            Cancel
                                        </button>
                                    </form>
                                    
                                </td>
                            </tr>
                        )) ||
                        <tr class="bg-gray-700"><td colspan="100%" class="p-1">No invites sent</td></tr> 
                    }
                    
                </tbody>
            </table>
            <script>
                var cancel_buttons = [].slice.call(document.getElementsByClassName('cancel'));
                cancel_buttons.forEach(element => {
                    element.onclick = function confirmCancel(e) {
                        if (!confirm('Are you sure you wish to cancel this invite?')) 
                            e.preventDefault();
                    }
                });
            </script>
            
        </div>
        <div class="w-fit mx-auto mt-5">
            <h4 class="text-xl m-5">Invite Players</h4>
            <form class="mb-5">
                <input type="text" name="search" value={search} class="text-black rounded-md"/>
            </form>
            
            {!invitablePlayers &&
                <p>Search for a player to invite</p> ||
            
                <table class="w-80">
                    <thead class="bg-gray-900">
                        <tr class="divide-x-2 divide-gray-400">
                            <th class="w-[50%]">Player</th>
                            <th class="w-[50%] px-2">Team</th>
                        </tr>
                    </thead>
                    <tbody>
                        {invitablePlayers.items.length > 0 &&
                            invitablePlayers.items.map((player, index) => (
                                <tr class={`${(index%2===0 && 'bg-gray-600') || 'bg-gray-700'} divide-x-2 divide-gray-400`}>
                                    <td class="p-1">{player.player_name}</td>
                                    <td class="p-1">
                                        {player.current_team &&
                                            player.current_team ||
                                            <form method="post">
                                                <input type="text" name="action" value="invite" hidden/>
                                                <input type="text" name="value" value={player.id.toString()} hidden/>
                                                <button formaction={`/manage/teams/${team.id}/invite`} class="invite bg-gray-400 text-black font-bold px-2 rounded-md outline outline-2 outline-gray-900 hover:bg-gray-300">
                                                    Invite
                                                </button>
                                            </form>
                                        }
                                    </td>
                                </tr>
                            )) ||

                            <tr class="bg-gray-700"><td colspan="100%" class="p-1">No players found</td></tr>
                        }
                        <script>
                            var invite_buttons = [].slice.call(document.getElementsByClassName('invite'));
                            invite_buttons.forEach(element => {
                                element.onclick = function confirmInvite(e) {
                                    if (!confirm('Are you sure you wish to invite this player?')) 
                                        e.preventDefault();
                                }
                            });
                        </script>
                    </tbody>
                </table>
            }
        </div>
    </div>
</TeamManageLayout>