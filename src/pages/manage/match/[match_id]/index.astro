---
import Button from '../../../../components/Button.astro';
import Popup from '../../../../components/Popup.astro';
import MatchManageLayout from '../../../../layouts/MatchManageLayout.astro';
import { permsHasOneOf, validateUser } from '../../../../util/authUtils';
import type { Match } from '../../../../util/srlmTypes';
import { SRLMAPIError, srlmDelete, srlmGet, srlmPut } from '../../../../util/srlmUtils';
import Page400 from '../../../400.astro';
import Page401 from '../../../401.astro';
import Page403 from '../../../403.astro';
import Page404 from '../../../404.astro';
import Page500 from '../../../500.astro';
import Page503 from '../../../503.astro';

var status = '200';

const userToken = Astro.cookies.get('user_token')?.value || '';
const permsList = ['admin', 'leag_coord', 'leag_comm'];
const userValidate = await validateUser(userToken, permsList).catch(err => {
    if (err instanceof SRLMAPIError) {
        status = err.code;
    } else {
        status = '500';
    }
	console.error(err);
});

const userElevated = permsHasOneOf(userValidate, permsList);
if (!userElevated && status === '200') {
    status = '403';
}

const { match_id } = Astro.params;

const match: Match = await srlmGet(`/match/${match_id}?cached=false`).catch(err => {
    if (err instanceof SRLMAPIError) {
        status = err.code;
    } else {
        status = '500';
    }
    console.error(err);
});

if (Astro.request.method === "POST" && status === "200") {
	const formData = await Astro.request.formData();
    const action = formData.get('action')!.toString();
    const value = formData.get('value')?.toString();

    var matchData:{round?:number,match_week?:number,cancelled?:string}|undefined = undefined;
    switch (action) {
        case 'edit':
            matchData = {
                round: +formData.get('round')!.toString(),
                match_week: +formData.get('match-week')!.toString()
            }
            break;
        case 'cancel-match':
            matchData = {
                cancelled: value
            }
            break;
        case 'delete':
            const resp = await srlmDelete(`/match/${match.id}`).catch(err => {
                if (err instanceof SRLMAPIError) {
                    status = err.code;
                } else {
                    status = '500';
                }
                console.error(err);
            });
            if (resp) {
                return Astro.redirect('/manage/match');
            }
            break;
    }
    if (matchData) {
        const resp = await srlmPut(`/match/${match.id}`, '', matchData).catch(err => {
            if (err instanceof SRLMAPIError) {
                status = err.code;
            } else {
                status = '500';
            }
            console.error(err);
        });
        if (resp) {
            return Astro.redirect('/manage/match');
        }
    }
	
	/**
        Use this catch block for any Post/Put requests to SRLMAPI to populate the 'errors' var.
        const resp = await srlmPost(path:string, usertoken?:string, input:{}).catch(err => {
            if (err instanceof SRLMAPIError) {
                if (err.code === '409') {
                    err.data.fields.map((err:{field:string, error: string}) => {
                        errors[err.field] = err.error;                
                    })
                } else {
                    status = err.code;
                }
            }
            console.error(err);
        });
        if (resp) {
            return // post/put request was successful, return a redirect or something
        }
	*/

    /**
        Use this code block to access the errors var in the HTML
        {(errors && errors['username']) && (
            <br/>
            <span class="text-red-600 font-bold">
                {errors['username']}
            </span>  
        )}
     */
}

---
{status === '400' &&
	<Page400/>
}
{status === '401' &&
	<Page401/>
}
{status === '403' &&
	<Page403/>
}
{status === '404' &&
	<Page404/>
}
{status === '500' &&
	<Page500/>
}
{status === '503' &&
	<Page503/>
}
{status === '200' &&
	<MatchManageLayout title="Edit Match" page="edit" userValidate={userValidate!}>
		<div class="divide-y-2 divide-gray-400 w-fit mx-auto">
            <div>
                <h2 class="text-xl font-bold">{match.home_team.name} vs {match.away_team.name}</h2>
                <h3>{match.season_division.season.name} - {match.season_division.division.name}</h3>
            </div>
            <form class="mt-5 p-2" method="post">
                <input type="text" name="action" value="edit" hidden />
                <table class="mx-auto">
                    <tbody>
                        <tr>
                            <td class="p-1">
                                <label class="font-bold">Round:</label>
                            </td>
                            <td class="p-1">
                                <input type="number" name="round" min="1" value={match.round} required class="text-black indent-2 rounded-sm shadow-black shadow-md outline outline-1 outline-gray-600 w-10 ml-3"/>
                            </td>
                        </tr>
                        <tr>
                            <td class="p-1">
                                <label class="font-bold">Match Week:</label>
                            </td>
                            <td class="p-1">
                                <input type="number" name="match-week" min="1" value={match.match_week} required class="text-black indent-2 rounded-sm shadow-black shadow-md outline outline-1 outline-gray-600 w-10 ml-3"/>
                            </td>
                        </tr>
                        <tr>
                            <td colspan="2">
                                <Button label="Update" color="blue" fontColor='white' className='w-full'/>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </form>
            <div>
                <Popup name="cancel" label="Cancel Match" color="orange" fontColor='gray-300'>
                    <form method="post" class="mb-5">
                        <input type="text" name="action" value="cancel-match" hidden />
                        <p class="text-left">
                            <label class="font-bold">Reason:</label><br/>
                            <input type="text" name="value" maxlength="32" class="text-black w-80 indent-1 rounded-sm shadow-black shadow-md outline outline-1 outline-gray-600" required/>
                        </p>
                        <Button 
                            label="Cancel Match"
                            color="orange"
                            fontColor='gray-300'
                        />
                    </form>
                </Popup>
                <Button
                    label="Delete"  
                    color="red" 
                    fontColor='white' 
                    form={{
                        action:'delete', 
                        value:match.id, 
                        confirm:'Are you sure you want to delete this match?<br/>This will delete all related match data and cannot be undone.', 
                        formAction:`/manage/match/${match.id}`
                    }}/>
            </div>
        </div>
	</MatchManageLayout>
}