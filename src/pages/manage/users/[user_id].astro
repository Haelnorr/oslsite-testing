---
import Layout from "../../../layouts/Layout.astro";
import { permsHasOneOf, setCookies, validateUser } from "../../../util/authUtils";
import type { User, UserPermissions } from "../../../util/srlmTypes";
import { SRLMAPIError, checkboxToBool, srlmGet, srlmPost, srlmPut } from "../../../util/srlmUtils";
import Page401 from '../../401.astro';
import Page403 from '../../403.astro';
import Page404 from '../../404.astro';
import Page500 from '../../500.astro';
import Page503 from '../../503.astro';

var status = '200';


const userToken = Astro.cookies.get('user_token')?.value || '';
const requiredPerms = ['admin', 'leag_comm', 'leag_coord'];
const userValidate = await validateUser(userToken, requiredPerms).catch(err => {
    if (err instanceof SRLMAPIError) {
        status = err.code;
    }
	console.error(err);
});

const userAuthorized = permsHasOneOf(userValidate, requiredPerms);
const userIsAdmin = permsHasOneOf(userValidate, ['admin']);
const userIsComm = permsHasOneOf(userValidate, ['admin']);

const { user_id } = Astro.params;

const user: User = await srlmGet(`/users/${user_id}`).catch(err => {
    if (err instanceof SRLMAPIError) {
        status = err.code;
    }
	console.error(err);
});

const userPermsResp: UserPermissions = await srlmGet(`/users/${user_id}/permissions`).catch(err => {
    if (err instanceof SRLMAPIError) {
        status = err.code;
    }
	console.error(err);
});
var userPerms:{[key:string]:any} = {};
userPermsResp?.permissions.map(perm => {
    if (perm.mods === 'True') {
        userPerms[perm.key] = true;
    } else {
        if (perm.key === 'team_owner') {
            userPerms[perm.key] = perm.mods.split(',')
        } else {
            userPerms[perm.key] = +perm.mods
        }
    }
})

const userEditingSelf = userValidate?.user == user?.id;

if (!(userAuthorized || userEditingSelf) && status === '200') {
    status = '403';
}

var errors:{[key:string]:string} = {};
var postSuccess = true;

if (Astro.request.method === "POST" && status === "200") {
    const formData = await Astro.request.formData();
    if (userEditingSelf) {
        const userInputs = {
            username: formData.get('username')?.toString(),
            email: formData.get('email')?.toString()
        }
        const userUpdate = await srlmPut(`/users/${user.id}`, userToken, userInputs);
        if (userUpdate) {
            if (userUpdate.status && userUpdate.status === 409) {
                userUpdate.data.fields.map((err:{field:string,error:string}) => {
                    errors[err.field] = err.error;                
                })
            } else {
                postSuccess = false;
            }
        }
        const password = formData.get('password')?.toString();
        const confirmPassword = formData.get('confirm-password')?.toString();
        if (password) {
            if (password === confirmPassword) {
                const passUpdate = await srlmPost(`/users/${user.id}/new_password`, userToken, {password:password});
                if (passUpdate && passUpdate['token']) {
                    setCookies(Astro, passUpdate);
                }
            } else {
                if (!errors) {
                    errors = {};
                }
                errors['password'] = 'Passwords do not match';
            }
            
        }
    } else if (userAuthorized) {
        const permInputs = {
            admin: checkboxToBool(formData, 'admin'),
            leag_comm: checkboxToBool(formData, 'leag-comm'),
            leag_coord: checkboxToBool(formData, 'leag-coord'),
            team_owner: (formData.getAll('team-owner-mods').length > 0) && formData.getAll('team-owner-mods'),
            team_manager: checkboxToBool(formData, 'team-manager') && formData.getAll('team-manager-mod')
        }
        const permsUpdate = await srlmPut(`/users/${user.id}/permissions`, '', permInputs)
        console.log(permsUpdate)
        return Astro.redirect(`/manage/users/${user.id}`)
    }
}

type Team = {
    id: number,
    acronym: string,
    name: string
}

const teams: Team[] = await srlmGet('/teams/list').then(resp => resp.teams).catch(err => {
    if (err instanceof SRLMAPIError) {
        status = err.code;
    }
	console.error(err);
});

---
{status === '401' &&
	<Page401/>
}
{status === '403' &&
	<Page403/>
}
{status === '404' &&
	<Page404/>
}
{status === '500' &&
	<Page500/>
}
{status === '503' &&
	<Page503/>
}
    {status === '200' &&
    <Layout title="Edit User">
        <main class="py-10 sm:container mx-auto text-white">
            <div class="pt-3 pb-10 mx-auto max-w-96 text-center">
                <h2 class="text-4xl">Editing User: {user.username}</h2>
                <form class="mt-5" method="post">
                    <table class="w-full border-spacing-y-1.5 border-separate px-10">
                        {userEditingSelf &&
                            <div>
                                <tr>
                                    <td colspan="2" class="align-text-top text-left">
                                        Name:
                                    </td>
                                    <td>
                                        <input type="text" name="username" id="username" value={user.username} class="text-black indent-2 rounded-sm outline outline-2 outline-gray-400" required />
                                        {(errors && errors['username']) && (
                                            <br/>
                                            <span class="text-red-600 font-bold">
                                                {errors['username']}
                                            </span>  
                                        )}
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2" class="align-text-top text-left">
                                        Email:
                                    </td>
                                    <td>
                                        <input type="email" name="email" id="email" value={user.email} class="text-black indent-2 rounded-sm outline outline-2 outline-gray-400" />
                                        {(errors && errors['email']) && (
                                            <br/>
                                            <span class="text-red-600 font-bold">
                                                {errors['email']}
                                            </span>  
                                        )}
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="3" class="font-bold">Change Password:</td>
                                </tr>
                                <tr>
                                    <td colspan="2" class="align-text-top text-left">
                                        Password:
                                    </td>
                                    <td>
                                        <input type="password" name="password" id="password" minlength="6" class="text-black indent-2 rounded-sm outline outline-2 outline-gray-400" />
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2" class="align-text-top text-left">
                                        Confirm:
                                    </td>
                                    <td>
                                        <input type="password" name="confirm-password" id="confirm-password" minlength="6" class="text-black indent-2 rounded-sm outline outline-2 outline-gray-400" />
                                        {(errors && errors['password']) && (
                                            <br/>
                                            <span class="text-red-600 font-bold">
                                                {errors['password']}
                                            </span>  
                                        )}
                                    </td>
                                </tr>
                            </div>
                        }
                        {userAuthorized && 
                            <div>
                                <tr>
                                    <td colspan="3" class="text-2xl">Permissions:</td>
                                </tr>
                                {(userIsAdmin || userIsComm) &&
                                    <tr>
                                        <td colspan="3" class="font-bold">Management:</td>
                                    </tr>
                                }
                                {(userIsAdmin && !userEditingSelf) && 
                                    <tr>
                                        <td colspan="2" class="w-[70%] text-right">Admin:</td>
                                        <td class="w-[20%] text-left pl-5">
                                            <input type="checkbox" name="admin" checked={user.permissions.includes('admin')} />
                                        </td>
                                    </tr>
                                }
                                {(userIsAdmin || userIsComm) &&
                                    <tr>
                                        <td colspan="2" class="text-right">League Commissioner:</td>
                                        <td class="text-left pl-5">
                                            <input type="checkbox" name="leag-comm" checked={user.permissions.includes('leag_comm')} />
                                        </td>
                                    </tr>
                                    <tr>
                                        <td colspan="2" class="text-right">League Coordinator:</td>
                                        <td class="text-left pl-5">
                                            <input type="checkbox" name="leag-coord" checked={user.permissions.includes('leag_coord')} />
                                        </td>
                                    </tr>
                                }
                                <tr>
                                    <td colspan="3" class="font-bold">Team Management:</td>
                                </tr>
                                <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
                                <tr>
                                    <td class="text-right">Team Owner:</td>
                                    </td>
                                    <td colspan="2" class="text-left pl-5 text-black">
                                        <select multiple="multiple" class="w-48 text-black indent-2 rounded-sm outline outline-2 outline-gray-400 team-list-select" name="team-owner-mods" id="team-owner-list">
                                            {
                                                teams.map(team => (
                                                    <option value={team.id} selected={(userPerms['team_owner'] && (userPerms['team_owner'].includes(team.id.toString())))}>{team.name}</option>
                                                ))
                                            }
                                        </select>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="text-right">Team Manager:</td>
                                    <td class="text-left pl-5">
                                        <input type="checkbox" name="team-manager" checked={userPerms['team_manager']}/>
                                    </td>
                                    <td class="text-left">
                                        <select class="w-40 text-black indent-2 rounded-sm outline outline-2 outline-gray-400 team-list-select" name="team-manager-mod" id="team-manager-list">
                                            <option value="" disabled selected={!userPerms['team_manager']}>Select team</option>
                                            {
                                                teams.map(team => (
                                                    <option value={team.id} selected={(userPerms['team_manager'] && (team.id === userPerms['team_manager']))}>{team.name}</option>
                                                ))
                                            }
                                        </select>
                                    </td>
                                </tr>
                            </div>
                            
                            <script>
                                {/**@ts-ignore */}
                                $(document).ready(function() {
                                    //@ts-ignore
                                    $('.team-list-select').select2();
                                });
                            </script>
                        }
                        <tr class="py-5">
                            <td colspan="3">
                                <button class="bg-blue-400 bg-opacity-80 hover:shadow-md hover:bg-opacity-60 duration-200 transition-all text-white font-bold py-2 rounded-md shadow-black w-[80%]">
                                    Update
                                </button>
                            </td>
                        </tr>
                    </table>
                </form>
            </div>
        </main>
    </Layout>
}